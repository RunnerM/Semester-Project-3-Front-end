@page "/AddPost"
@using Feedle.Models
@using Feedle.Data
@inject INewsService NewsService
@inject IUserService UserService
@inject NavigationManager NavigationManager;
@inject BlazorTimer Timer

@if (!postAddedResult)
{
    <AuthorizeView>
        <Authorized>
            <h3>AddPost</h3>
            <div class="form-row">
                <div class="form-group col">
                    <label>Title</label>
                    <input class="form-control" placeholder="Title [Required]" @bind="postTitle">
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col">
                    <label>Content</label>
                    <textarea class="form-control" rows="5" @bind="postContent"></textarea>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col">
                    <label for="exampleFormControlFile1">Example file input</label>
                    <input class="form-control" placeholder="Image URL here" @bind="postImage">
                </div>
            </div>
            <label style="color: red">
                <b>
                    <i>No validation available yet! Please fill in correctly!</i>
                </b>
            </label>
            <button class="btn btn-outline-dark btn-sm" @onclick="addPost" type="submit">Add Post</button>
        </Authorized>
        <NotAuthorized>
            @navigateToError();
        </NotAuthorized>
    </AuthorizeView>
}
else
{
    <div class="text-center">
        <p class="text-muted">
            The post has been created.
        </p>
        <p class="text-muted">Redirecting to front page in 2 second ...</p>
    </div>
}



@code {
    string postTitle { get; set; }
    string postImage { get; set; }
    string postContent { get; set; }
    User currentUser { get; set; }
    DateTime DateTime { get; set; }
    bool postAddedResult;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GetCurrentUser();
    }

    public async void addPost()
    {
        if (currentUser != null)
        {
            Post post = new Post();
            post.Title = postTitle;
            post.Content = postContent;
            //post.Image = postImage;
            post.AuthorUserName = currentUser.UserName;
            post.UserId = currentUser.Id;
            post.Comments = new List<Comment>();

            DateTime = DateTime.Now;
            post.Second = DateTime.Second;
            post.Minute = DateTime.Minute;
            post.Hour = DateTime.Hour;
            post.Day = DateTime.Day;
            post.Month = DateTime.Month;
            post.Year = DateTime.Year;

            postAddedResult = await NewsService.AddPostAsync(post);
            StartTimer();
        }
    }

    private object navigateToError()
    {
        NavigationManager.NavigateTo("/Error");
        return new object(); //does not need to return anything
    }

    //timer
    private void StartTimer()
    {
        InvokeAsync(StateHasChanged);
        Timer.SetTimer(2500);
        Timer.OnElapsed += TimerElapsedHandler;
    }

    private void TimerElapsedHandler()
    {
        NavigationManager.NavigateTo("/");
    }

}