@page "/ReadPost/{id:int}"
@inject NavigationManager NavigationManager;
@using Feedle.Data
@using Feedle.Models
@using System.Collections
@using System.Text.Json
@inject INewsService NewsService;
@inject IUserService UserService;
<h3>ReadPost</h3>
@if (post != null)
{
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">@post.Title</h5>
            <p class="card-text">@post.Content</p>
            <div class="card-footer text-muted">
                @post.AuthorUserName
            </div>
        </div>
    </div>
    <div class=" justify-content-center mt-100 mb-100">
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">Recent Comments</h4>
                        <h6 class="card-subtitle">Latest Comments section by users</h6>
                    </div>
                    <div class="comment-widgets m-b-20">
                        @if (post.Comments != null)
                        {
                            @for (int i = 0; i < post.Comments.Count; i++)
                            {
                                <div class="d-flex flex-row comment-row">
                                    <div class="p-2">
                                        <span class="round">
                                            <a href="OtherProfile/@post.Comments[i].UserId"><img src="extra/user-empty-avatar.png" alt="user" width="50"></a>
                                        </span>
                                    </div>
                                    <div class="comment-text w-100">
                                        <h5>kek</h5>
                                        <div class="comment-footer">
                                            <span class="label label-info">Published</span><span class="date">@post.Comments[i].Year</span>
                                        </div>
                                        <p class="m-b-5 m-t-10">@post.Comments[i].Content</p>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
<AuthorizeView>
    <Authorized>
        <form>
            <div class="form-row">
                <div class="form-group col">
                    <textarea class="form-control" rows="3" placeholder="Comment here" @bind="commentText"></textarea>
                </div>
            </div>
        </form>
        <button @onclick="writeComment">Comment</button>
    </Authorized>
    <NotAuthorized>
        <a href="LogIn">To write a comment log in first</a>
    </NotAuthorized>
</AuthorizeView>
}


@code {

    [Parameter] public int Id { get; set; }

    private Post post;
    private User currentUser;
    private string commentText;
    private DateTime localDate;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GetCurrentUser();
        IList<Post> posts = await NewsService.GetAllNews();
        localDate = new DateTime();
        post = posts.FirstOrDefault(i => i.Id == Id);
        if (post == null)
        {
            NavigationManager.NavigateTo("/Error");
        }
    }

    private async Task writeComment()
    {
        if (commentText == null || commentText.Equals(""))
        {
        }
        else
        {
            Comment comment = new Comment();
            comment.Content = commentText;
            comment.UserId = currentUser.Id;
            comment.AuthorUserName = currentUser.DisplayedUserName;
            localDate = DateTime.Now;
            comment.Second = localDate.Second;
            comment.Minute = localDate.Minute;
            comment.Hour = localDate.Hour;
            comment.Day = localDate.Day;
            comment.Month = localDate.Month;
            comment.Year = localDate.Year;
            await NewsService.CommentPost(comment,post.Id);
            commentText = "";
            IList<Post> posts = await NewsService.GetAllNews();
            post = posts.FirstOrDefault(i => i.Id == Id);
        }
    }

}