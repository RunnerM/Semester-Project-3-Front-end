@page "/OtherProfile/{id:int}"
@using Feedle.Models
@using Feedle.Data
@inject INewsService NewsService;
@inject IUserService UserService;

<AuthorizeView>
    <Authorized>
        <h3>@GetOtherUserUserName()</h3>
        <div class="oi oi-person"></div>
        <p>@id</p>
        <a class="btn btn-outline-secondary" @onclick="AddFriend">Send friend request</a>
        <a class="btn btn-outline-secondary" @onclick="Subscribe">Subscribe</a>
    </Authorized>
    <NotAuthorized>
        <h3>OtherProfile</h3>
        <div class="oi oi-person"></div>
        <p>@id</p>
        <a class="btn btn-outline-secondary" href="LogIn">Send friend request</a>
        <a class="btn btn-outline-secondary" href="LogIn">Subscribe</a>
        <a class="btn btn-outline-secondary" href="LogIn">Send message</a>
        <em>To subscribe / send friend request / send message, <a href="LogIn">log in</a> first</em>
    </NotAuthorized>
</AuthorizeView>


@code {

    [Parameter]
    public int id { get; set; }

    private UserInformation otherUser;
    private User currentUser;


    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GetCurrentUser();
        otherUser = await UserService.GetUserInformationById(id);
    }

    public string GetOtherUserUserName()
    {
        if (otherUser != null)
        {
            return otherUser.UserName;
        }
        return "Uknown";
    }

    public async Task AddFriend()
    {
            FriendRequestNotification friendRequestNotification = new FriendRequestNotification();
            friendRequestNotification.CreatorId = currentUser.Id;
            friendRequestNotification.PotentialFriendUserId = id;
            friendRequestNotification.PotentialFriendUserName = otherUser.UserName;
            bool result = await UserService.MakeFriendRequestNotification(friendRequestNotification);
        if (result)
        {
            
        }
    }

    async Task Subscribe()
    {
        
    }

}