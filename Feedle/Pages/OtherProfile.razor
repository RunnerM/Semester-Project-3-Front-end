@page "/OtherProfile/{id:int}"
@using Feedle.Models
@using Feedle.Data
@inject INewsService NewsService;
@inject IUserService UserService;

<AuthorizeView>
    <Authorized>
        <h3>@GetOtherUserUserName()</h3>
        <div class="oi oi-person"></div>
        <p>@id</p>
        @if (GetIsFriend())
        {
            <a class="btn btn-outline-secondary" @onclick="RemoveFriend">Remove friend</a>  
        }
        else if (IsFriendRequestSent() && !GetIsFriend())
        {
            <a class="btn btn-outline-secondary">Friend request sent</a>  
        }
        else
        {
            <a class="btn btn-outline-secondary" @onclick="AddFriend">Send friend request</a>  
        }
        @if (IsSubscribed())
        {
            <a class="btn btn-outline-secondary" @onclick="Unsubscribe">Unsubscribe</a>
        }
        else
        {
            <a class="btn btn-outline-secondary" @onclick="Subscribe">Subscribe</a>
        }
        
        @if (GetIsFriend())
        {
            @if (messages == null)
            {
                <p>
                    <em>Loading...</em>
                </p>
            }
            else if (!messages.Any())
            {
                <p>
                    <em>No messages between u 2.</em>
                </p>
            }
            else
            {
                <ul class="list-group">
                    @foreach (var i in messages)
                    {
                        <li class="list-group-item">
                            @i.UserId
                            <span>--</span>
                            @i.Content
                        </li>
                    }
                </ul>
            }
            <input @bind="messageText" placeholder="type here pidor"/>
            <button type="button" class="btn btn-primary" @onclick="sendMessage">Send nahui</button>
        }

    </Authorized>
    <NotAuthorized>
        <h3>OtherProfile</h3>
        <div class="oi oi-person"></div>
        <p>@id</p>
        <a class="btn btn-outline-secondary" href="LogIn">Send friend request</a>
        <a class="btn btn-outline-secondary" href="LogIn">Subscribe</a>
        <a class="btn btn-outline-secondary" href="LogIn">Send message</a>
        <em>To subscribe / send friend request / send message, <a href="LogIn">log in</a> first</em>
    </NotAuthorized>
</AuthorizeView>


@code {

    [Parameter]
    public int id { get; set; }

    
    private UserInformation otherUser;
    private User currentUser;
    private List<Message> messages;
    private string messageText;


    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GetCurrentUser();
        otherUser = await UserService.GetUserInformationById(id);
        messages = new List<Message>();
        Message tmp = new Message();
        tmp.Content = "hui";
        tmp.UserId = 69;
        messages.Add(tmp);
    //TODO get the converstation
    }

    public string GetOtherUserUserName()
    {
        if (otherUser != null)
        {
            return otherUser.UserName;
        }
        return "Uknown";
    }

    public async Task AddFriend()
    {
        FriendRequestNotification friendRequestNotification = new FriendRequestNotification();
        friendRequestNotification.UserId = id;
        friendRequestNotification.PotentialFriendUserId = currentUser.Id;
        friendRequestNotification.PotentialFriendUserName = otherUser.UserName;
        friendRequestNotification.CreatorUserName = currentUser.UserName;
        friendRequestNotification.CreatorId = currentUser.Id;
        bool result = await UserService.MakeFriendRequestNotification(friendRequestNotification);
        if (result)
        {
            currentUser = await UserService.GetCurrentUser();
            otherUser = await UserService.GetUserInformationById(id);
        }
    }

    public async Task RemoveFriend()
    {
        
    }

    async Task Subscribe()
    {
      UserSubscription userSubscription = new UserSubscription();
        userSubscription.UserId = currentUser.Id;
        userSubscription.SubscriptionId = id;
        userSubscription.UserName = currentUser.UserName;
        bool result = await UserService.SubscribeToUser(userSubscription);
        if (result)
        {
            currentUser = await UserService.GetCurrentUser();
            otherUser = await UserService.GetUserInformationById(id);
        }
    }

    async Task Unsubscribe()
    {
        bool result = await UserService.UnsubscribeFromUser(currentUser.Id, id);
        if (result)
        {
            currentUser = await UserService.GetCurrentUser();
            otherUser = await UserService.GetUserInformationById(id);
        }
    }

    async Task sendMessage()
    {
        messageText = "";
    }

    public bool IsFriendRequestSent()
    {
        if (currentUser != null)
        {
            foreach (var friendRequestNotification in currentUser.FriendRequestNotifications)
            {
                if (friendRequestNotification.PotentialFriendUserId == id)
                {
                    return true;
                }
            }
        }
        return false;
    }

    public bool GetIsFriend()
    {
        if (currentUser != null)
        {
            foreach (var uc in currentUser.UserFriends)
            {
                if (uc.FriendId == id)
                {
                    return true;
                }
            }
        }

        return false;
    }

    public bool IsSubscribed()
    {
        if (currentUser != null)
        {
            foreach (var us in currentUser.UserSubscriptions)
            {
                if (us.SubscriptionId == id)
                {
                    return true;
                }
            }
        }
        return false;
    }

}