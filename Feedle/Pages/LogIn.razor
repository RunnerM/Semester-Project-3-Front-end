@page "/LogIn"
@using Feedle.Authentication

@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject NavigationManager NavigationManager;
@* <div class="text-center"> *@
@*     <form class="form-signin"> *@
@*         <img class="mb-4" src="extra/9742 feedle_RB_1.png" alt width="72"> *@
@*         <h1 class="h3 mb-3 font-weight-normal">Please sign in</h1> *@
@*         <label for="inputEmail" class="sr-only">Email address</label> *@
@*         <input @bind-value="username" type="text"  class="form-control" placeholder="Username" required="" autofocus=""> *@
@*         <label for="inputPassword" class="sr-only">Password</label> *@
@*         <input @bind-value="password" type="password" id="inputPassword" class="form-control" placeholder="Password" required=""> *@
@*         <button @onClick="PerformLogin" class="btn btn-lg btn-primary btn-block" type="submit">Sign in</button> *@
@*         <p>@errorMessage</p> *@
@*         <p>or <a href="SignUp">sign up</a> instead</p> *@
@*         <p class="mt-5 mb-3 text-muted">"tak - huiak" © Eugene</p> *@
@*         <AuthorizeView> *@
@*             <Authorized> *@
@*                 <p>you are logged in</p> *@
@*             </Authorized> *@
@*         </AuthorizeView> *@
@*     </form> *@
@* </div> *@
<AuthorizeView>
    <NotAuthorized>
        <div class="form-group">
            <label>User name:</label>
            <input type="text" placeholder="user name" @bind-value="username"/>
        </div>
        <div class="form-group">
            <label>Password</label>
            <input type="password" placeholder="password" @bind-value="password"/>
        </div>
        <div style="color:red">@errorMessage</div>

        <a href="" @onclick="PerformLogin">
            Login
        </a>
    </NotAuthorized>
    <Authorized>
        <a href="" @onclick="PerformLogout">
            Log out
        </a>
    </Authorized>
</AuthorizeView>

@code {
    private string username;
    private string password;
    private string errorMessage;

    public async Task PerformLogin() {
        errorMessage = "";
        try {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLogin(username, password);
            username = "";
            password = "";
            Console.WriteLine("success");
        } catch (Exception e) {
            errorMessage = e.Message;
        }
    }

    public async Task PerformLogout() {
        errorMessage = "";
        username = "";
        password = "";
        try {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("/");
        } catch (Exception e) { }
    }

}