@page "/Profile"
@using Feedle.Models
@using Feedle.Data
@using Feedle.Authentication
@using System.Text.Json
@inject IUserService UserService;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject NavigationManager NavigationManager;
@inject BlazorTimer Timer

@switch (pageState)
{
    case "default":
    {
        <AuthorizeView>
            <Authorized>
                <div class="row">
                    <div class="d-flex align-items-start">
                        <RadzenIcon Icon="person"></RadzenIcon>
                    
                    </div>
                <div class="col-md">
                    <h3>@GetUserName()</h3>
                </div>
                    <div class="d-flex align-items-end">
                        <button @onclick="ChangePassword" class="btn btn-light" type="submit">Change Password</button>
                        <button @onclick="DeleteProfile" class="btn btn-light" type="submit">Delete profile</button>
                    </div>
                </div>

                <div id="accordion">
                    <div class="card">
                        <div class="card-header" id="headingOne">
                            <h5 class="mb-0">
                                <button class="btn btn-link" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne" @onclick="ToggleList0">
                                    Posts
                                </button>
                            </h5>
                        </div>

                        <div id="collapseOne" class="@NavMenuCssClass0" aria-labelledby="headingOne" data-parent="#accordion">
                            <div class="card-body">
                                @if (posts == null)
                                {
                                    <p>
                                        <em>Loading...</em>
                                    </p>
                                }
                                else if (!posts.Any())
                                {
                                    <p>
                                        <em>U have no posts.</em>
                                    </p>
                                }
                                else
                                {
                                    <ul class="list-group">
                                        @foreach (var i in posts)
                                        {
                                            var copy = i;
                                            <li class="list-group-item">
                                                @i.Title
                                                <span class="oi oi-trash cursor-pointer" @onclick="@(e => DeletePost(copy))"></span>
                                            </li>
                                        }
                                    </ul>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-header" id="headingTwo">
                            <h5 class="mb-0">
                                <button class="btn btn-link collapsed" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo" @onclick="ToggleList1"> Friends </button>
                            </h5 >
                        </div >
                        <div id="collapseTwo" class="@NavMenuCssClass1" aria-labelledby="headingTwo" data-parent="#accordion">
                            <div class="card-body">
                                @if (friends == null)
                                {
                                    <p>
                                        <em>Loading...</em>
                                    </p>
                                }
                                else if (!friends.Any())
                                {
                                    <p>
                                        <em>U have no friends.</em>
                                    </p>
                                }
                                else
                                {
                                    <ul class="list-group">
                                        @foreach (var i in friends)
                                        {
                                            <li class="list-group-item">
                                                <p>@i.UserName</p>
                                            </li>
                                        }
                                    </ul>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-header" id="headingThree">
                            <h5 class="mb-0">
                                <button class="btn btn-link collapsed" data-toggle="collapse" data-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree" @onclick="ToggleList2">
                                    Subscriptions
                                </button>
                            </h5>
                        </div>
                        <div id="collapseThree" class="@NavMenuCssClass2" aria-labelledby="headingThree" data-parent="#accordion">
                            <div class="card-body">
                                @if (subscritions == null)
                                {
                                    <p>
                                        <em>Loading...</em>
                                    </p>
                                }
                                else if (!subscritions.Any())
                                {
                                    <p>
                                        <em>U have no subscriptions.</em>
                                    </p>
                                }
                                else
                                {
                                    <ul class="list-group">
                                        @foreach (var i in subscritions)
                                        {
                                            <li class="list-group-item">@i.UserName</li>
                                        }
                                    </ul>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-header" id="headingFour">
                            <h5 class="mb-0">
                                <button class="btn btn-link collapsed" data-toggle="collapse" data-target="#collapseFour" aria-expanded="false" aria-controls="collapseFour" @onclick="ToggleList3">
                                    Friend requests
                                </button>
                            </h5>
                        </div>
                        <div id="collapseFour" class="@NavMenuCssClass3" aria-labelledby="headingFour" data-parent="#accordion">
                            <div class="card-body">
                                @if (friendRequests == null)
                                {
                                    <p>
                                        <em>Loading...</em>
                                    </p>
                                }
                                else if (!friendRequests.Any())
                                {
                                    <p>
                                        <em>U have no friends requests.</em>
                                    </p>
                                }
                                else
                                {
                                    <ul class="list-group">
                                        @foreach (var i in friendRequests)
                                        {
                                            <li class="list-group-item">@i.UserName</li>
                                        }
                                    </ul>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </Authorized>
            <NotAuthorized>
                <Error></Error>
            </NotAuthorized>
        </AuthorizeView>
        break;
    }
    case "logout":
    {
        <div class="text-center">
            <p class="text-muted">
                You have been signed out.
            </p>
            <p class="text-muted">Redirecting to front page in a moment ...</p>
        </div>
        break;
    }
    case "delete":
    {
        <div class="text-center">
            <p class="text-muted">
                Your account has been deleted.
            </p>
            <p class="text-muted">Redirecting to front page in a moment ...</p>
        </div>
        break;
    }
}



@code {
    string pageState = "default";

    //lists section
    bool collapseNavMenu0 = false;
    bool collapseNavMenu1 = true;
    bool collapseNavMenu2 = true;
    bool collapseNavMenu3 = true;

    string NavMenuCssClass0 => collapseNavMenu0 ? "collapse" : null;
    string NavMenuCssClass1 => collapseNavMenu1 ? "collapse" : null;
    string NavMenuCssClass2 => collapseNavMenu2 ? "collapse" : null;
    string NavMenuCssClass3 => collapseNavMenu3 ? "collapse" : null;

    void ToggleList0()
    {
        collapseNavMenu0 = !collapseNavMenu0;
    }

    void ToggleList1()
    {
        collapseNavMenu1 = !collapseNavMenu1;
    }

    void ToggleList2()
    {
        collapseNavMenu2 = !collapseNavMenu2;
    }

    void ToggleList3()
    {
        collapseNavMenu3 = !collapseNavMenu3;
    }

    //user data section
    private User currentUser;
    private List<Post> posts;
    private List<User> friends;
    private List<UserInformation> subscritions;
    private List<User> friendRequests;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GetCurrentUser();
        posts = currentUser.UserPosts;
        friends = new List<User>(); //TODO connect to friends list
        subscritions = currentUser.SubscriptionUsersInformation;
        friendRequests = new List<User>(); //TODO connect to friends requests list
    }

    public String GetUserName()
    {
        if (currentUser == null)
        {
            return "unknown";
        }
        else
        {
            return currentUser.UserName;
        }
    }

    public async Task DeleteProfile()
    {
        try
        {
    //delete account
            pageState = "delete";
            StartTimer(2000);
        }
        catch (Exception e)
        {
        }
    }

    public async Task ChangePassword()
    {
        NavigationManager.NavigateTo("/ChangePassword");
    }

    async Task DeletePost(Post post)
    {
    //await NewsService.DeletePost(post); //TODO connect to web api
    //InvokeAsync(StateHasChanged);
        Console.WriteLine(post.Title);
    }

    //timer
    private void StartTimer(int msec)
    {
        InvokeAsync(StateHasChanged);
        Timer.SetTimer(msec);
        Timer.OnElapsed += TimerElapsedHandler;
    }

    private void TimerElapsedHandler()
    {
        NavigationManager.NavigateTo("/");
    }
}