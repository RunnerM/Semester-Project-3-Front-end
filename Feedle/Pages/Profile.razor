@page "/Profile"
@using Feedle.Models
@using Feedle.Data
@using Feedle.Authentication
@inject IUserService UserService;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject NavigationManager NavigationManager;
@inject BlazorTimer Timer

@switch (pageState)
{
    case "default":
    {
        <AuthorizeView>
            <Authorized>
                <div class="oi oi-person"></div>
                <h3>@GetUserName()</h3>
                <button @onclick="changePassword" class="btn btn-primary" type="submit">Change Password</button>
                <button @onclick="deleteProfile" class="btn btn-primary" type="submit">Delete profile</button>
                <button @onclick="PerformLogout" class="btn btn-primary" type="submit">Log out</button>
                <div id="accordion">
                    <div class="card">
                        <div class="card-header" id="headingOne">
                            <h5 class="mb-0">
                                <button class="btn btn-link" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne" @onclick="ToggleList0">
                                    Posts
                                </button>
                            </h5>
                        </div>

                        <div id="collapseOne" class="@NavMenuCssClass0" aria-labelledby="headingOne" data-parent="#accordion">
                            <div class="card-body">
                                @if (testStrings == null)
                                {
                                    <p>
                                        <em>Loading...</em>
                                    </p>
                                }
                                else if (!testStrings.Any())
                                {
                                    <p>
                                        <em>U have no posts.</em>
                                    </p>
                                }
                                else
                                {
                                    <ul class="list-group">
                                        @foreach (var i in testStrings)
                                        {
                                            <li class="list-group-item">@i</li>
                                        }
                                    </ul>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-header" id="headingTwo">
                            <h5 class="mb-0">
                                <button class="btn btn-link collapsed" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo" @onclick="ToggleList1"> Friends </button>
                            </h5 >
                        </div >
                        <div id="collapseTwo" class="@NavMenuCssClass1" aria-labelledby="headingTwo" data-parent="#accordion">
                            <div class="card-body">
                                @if (testStrings == null)
                                {
                                    <p>
                                        <em>Loading...</em>
                                    </p>
                                }
                                else if (!testStrings.Any())
                                {
                                    <p>
                                        <em>U have no friends.</em>
                                    </p>
                                }
                                else
                                {
                                    <ul class="list-group">
                                        @foreach (var i in testStrings)
                                        {
                                            <li class="list-group-item">
                                                <p>in development</p>
                                            </li>
                                        }
                                    </ul>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-header" id="headingThree">
                            <h5 class="mb-0">
                                <button class="btn btn-link collapsed" data-toggle="collapse" data-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree" @onclick="ToggleList2">
                                    Subscriptions
                                </button>
                            </h5>
                        </div>
                        <div id="collapseThree" class="@NavMenuCssClass2" aria-labelledby="headingThree" data-parent="#accordion">
                            <div class="card-body">
                                @if (testStrings == null)
                                {
                                    <p>
                                        <em>Loading...</em>
                                    </p>
                                }
                                else if (!testStrings.Any())
                                {
                                    <p>
                                        <em>U have no subscriptions.</em>
                                    </p>
                                }
                                else
                                {
                                    <ul class="list-group">
                                        @foreach (var i in testStrings)
                                        {
                                            <li class="list-group-item">@i</li>
                                        }
                                    </ul>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </Authorized>
            <NotAuthorized>
                <Error></Error>
            </NotAuthorized>
        </AuthorizeView>
        break;
    }
    case "logout":
    {
        <div class="text-center">
            <p class="text-muted">
                You have been signed out.
            </p>
            <p class="text-muted">Redirecting to front page in a moment ...</p>
        </div>
        break;
    }
}



@code {
    string pageState = "default";

    //lists section
    bool collapseNavMenu0 = false;
    bool collapseNavMenu1 = true;
    bool collapseNavMenu2 = true;

    string NavMenuCssClass0 => collapseNavMenu0 ? "collapse" : null;
    string NavMenuCssClass1 => collapseNavMenu1 ? "collapse" : null;
    string NavMenuCssClass2 => collapseNavMenu2 ? "collapse" : null;

    void ToggleList0()
    {
        collapseNavMenu0 = !collapseNavMenu0;
    }

    void ToggleList1()
    {
        collapseNavMenu1 = !collapseNavMenu1;
    }

    void ToggleList2()
    {
        collapseNavMenu2 = !collapseNavMenu2;
    }

    //user data section
    private User currentUser;
    private List<Post> posts;
    private List<User> fiends;
    private List<string> subscritions;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GetCurrentUser();
    }

    public String GetUserName()
    {
        if (currentUser == null)
        {
            return "unknown";
        }
        else
        {
            return currentUser.UserName;
        }
    }

    public async Task deleteProfile()
    {
    }

    public async Task changePassword()
    {
    }

    public async Task PerformLogout()
    {
        try
        {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
            StartTimer();
        }
        catch (Exception e)
        {
        }
    }

    //testing purpose
    List<string> testStrings = new List<string> {"Cupcake", "Cake", "Candy"};

    //timer
    private void StartTimer()
    {
        pageState = "logout";
        InvokeAsync(StateHasChanged);
        Timer.SetTimer(2000);
        Timer.OnElapsed += TimerElapsedHandler;
    }

    private void TimerElapsedHandler()
    {
        NavigationManager.NavigateTo("/");
    }

}