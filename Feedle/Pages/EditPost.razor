@page "/EditPost/{id:int}"
@using Feedle.Models
@using Feedle.Data
@inject INewsService NewsService
@inject IUserService UserService
@inject NavigationManager NavigationManager;
@inject BlazorTimer Timer
@if (!postChangedResult)
{
    <AuthorizeView>
        <Authorized>
            <h3>Edit post</h3>
            <div class="form-row">
                <div class="form-group col">
                    <label>Title</label>
                    <input class="form-control" placeholder="Title [Required]" @bind="postTitle">
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col">
                    <label>Content</label>
                    <textarea class="form-control" rows="5" @bind="postContent"></textarea>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col">
                    <label>Image</label>
                    <input class="form-control" placeholder="Image URL here" @bind="postImage">
                </div>
            </div>
            <label>@errorLabel</label>
            <button class="btn btn-outline-dark btn-sm" @onclick="saveChanges" type="submit">Save changes</button>
        </Authorized>
        <NotAuthorized>
            @navigateToError();
        </NotAuthorized>
    </AuthorizeView>
}
else
{
    <div class="text-center">
        <p class="text-muted">
            The post has been changed.
        </p>
        <p class="text-muted">Redirecting in a moment.</p>
    </div>
}

@code {

    [Parameter]
    public int Id { get; set; }

    string errorLabel;
    bool postChangedResult;
    string postTitle;
    string postContent;
    string postImage;
    IList<Post> posts;
    Post currentPost;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            posts = await NewsService.GetAllNews();
            currentPost = posts.FirstOrDefault(p => p.Id == Id);
            postTitle = currentPost.Title;
            postContent = currentPost.Content;
    //postImage = currentPost.Image;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            navigateToError();
        }
    }

    async Task saveChanges()
    {
        if (Check(postTitle) == false && Check(postContent) == false)
        {
            try
            {
                errorLabel = "";
                postChangedResult = true;
                //postChangedResult = await NewsService.UpdatePostAsync();
                StartTimer();
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                navigateToError();
            }
        }
        else
        {
            errorLabel = "The title or content field is empty";
        }
    }

    private object navigateToError()
    {
        NavigationManager.NavigateTo("/Error");
        return new object(); //does not need to return anything
    }

    public static bool Check(string s)
    {
        return (s == null || s == String.Empty) ? true : false;
    }

    //timer
    private void StartTimer()
    {
        InvokeAsync(StateHasChanged);
        Timer.SetTimer(2000);
        Timer.OnElapsed += TimerElapsedHandler;
    }

    private void TimerElapsedHandler()
    {
        NavigationManager.NavigateTo("/ReadPost/" + Id);
    }

}