@using Feedle.Models
@using Feedle.Data
@using System.Text.Json
@using System.Collections
@inject INewsService NewsService;
@inject IUserService UserService;
@inject NavigationManager NavigationManager;

@page "/PostView/{filterBy}/{sortBy}"
<div>
    @if (posts == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else if (!posts.Any())
    {
        <p>
            <em>There are no posts.</em>
        </p>
    }
    else
    {
        @foreach (Post p in displayedPosts)
        {
            <div class="card">
                <div class="card-header">
                    <div class="d-flex flex-row align-items-center">
                        <div>
                            <img src="@GetTheImage(p)" width="40" style="border-radius: 50%" @onclick="@(e => NavigateToProfile(p))" class="cursor-pointer">
                        </div>
                        <div style="margin-left: 1%">@p.AuthorUserName</div>
                    </div>
                </div>
                <img class="img-fluid" src=@p.PostImageSrc alt="Image of @p.Title" width="25%">
                <div class="card-body">
                    <h5 class="card-title">@p.Title</h5>
                    <p class="card-text">@p.Content</p>
                    <a href="ReadPost/@p.Id" class="btn btn-primary">Go to post</a>
                </div>
                <div class="card-footer">
                    @{
                        var copy1 = p;
                    }
                    <span>@GetTime(p)</span>
                    <span class=@GetDisplayedThumbUp(copy1) @onclick="@(e => ThumbUp(copy1))"></span>
                    <span>(</span><span>@p.Approvals</span><span>)</span>
                    <span class=@GetDisplayedThumbDown(copy1) @onclick="@(e => ThumbDown(copy1))"></span>
                    <span>(</span><span>@p.Disapprovals</span><span>)</span>
                    @if (IsAuthor(p))
                    {
                        <span class="oi oi-trash cursor-pointer" @onclick="@(e => DeletePost(copy1))"></span>
                        <span class="oi oi-pencil cursor-pointer" @onclick="@(e => EditPost(copy1))"></span>
                    }
                </div>
            </div>
        }
    }
</div>

@code {
    IList<Post> posts;
    List<Post> displayedPosts;
    User currentUser;
    List<UserSubscription> userSubscriptions;
    List<UserInformation> UserInformationList;


    [Parameter]
    public string filterBy { get; set; }

    [Parameter]
    public string sortBy { get; set; }

    protected override async Task OnInitializedAsync()
    {
        posts = await NewsService.GetAllNews();
        currentUser = await UserService.GetCurrentUser();
        displayedPosts = (List<Post>) posts;
    // = currentUser.UserSubscriptions;
        UserInformationList = await GetUserInformation();
    }

    public async Task<List<UserInformation>> GetUserInformation()
    {
        List<UserInformation> result = new List<UserInformation>();
        foreach (var post in posts)
        {
            result.Add(await UserService.GetUserInformationById(post.UserId));
        }
        return result;
    }

    public List<Post> GetSubscribedPosts()
    {
        List<Post> tmpPosts = new List<Post>();
        List<int> idsOfUsersSubscriptions = new List<int>();
        for (int i = 0; i < userSubscriptions.Count; i++)
        {
            idsOfUsersSubscriptions.Add(userSubscriptions[i].UserId);
        }

        for (int i = 0; i < posts.Count; i++)
        {
            if (idsOfUsersSubscriptions.Contains(posts[i].UserId))
            {
                tmpPosts.Add(posts[i]);
            }
        }
        return tmpPosts;
    }

    protected async override void OnParametersSet()
    {
        switch (filterBy)
        {
            case "all":
            {
                if (sortBy.Equals("newestFirst"))
                {
                    await OnInitializedAsync();
                    displayedPosts.Reverse();
                    InvokeAsync(StateHasChanged);
                }
                else
                {
                    await OnInitializedAsync();
                    InvokeAsync(StateHasChanged);
                }
                break;
            }
            case "onlySubscriptions":
            {
                if (sortBy.Equals("newestFirst"))
                {
                    await OnInitializedAsync();
                    displayedPosts = GetSubscribedPosts();
                    displayedPosts.Reverse();
                    InvokeAsync(StateHasChanged);
                }
                else
                {
                    await OnInitializedAsync();
                    displayedPosts = GetSubscribedPosts();
                    InvokeAsync(StateHasChanged);
                }
                break;
            }
        }
    }

    string GetTime(Post post)
    {
        return post.Hour + ":" + post.Minute + "  " + post.Day + "." + post.Month + "." + post.Year;
    }

    bool IsAuthor(Post post)
    {
        if (currentUser != null)
        {
            return currentUser.UserName.Equals(post.AuthorUserName);
        }
        return false;
    }

    async Task DeletePost(Post post)
    {
        await NewsService.DeletePost(post.Id);
        await OnInitializedAsync();
        InvokeAsync(StateHasChanged);
    }

    void EditPost(Post post)
    {
        NavigationManager.NavigateTo("/EditPost/" + post.Id);
    }

    void NavigateToProfile(Post post)
    {
        if (currentUser != null)
        {
            if (currentUser.Id == post.UserId)
            {
                NavigationManager.NavigateTo("/Profile");
            }
            else
            {
                NavigationManager.NavigateTo("/OtherProfile/" + post.UserId);
            }
        }
        else
        {
            NavigationManager.NavigateTo("/OtherProfile/" + post.UserId);
        }
    }

    async Task ThumbUp(Post post)
    {
    //TODO: thumb up
    }

    async Task ThumbDown(Post post)
    {
    //TODO: thumb down
    }

    string GetDisplayedThumbUp(Post post)
    {
    /*
        if (currentUser != null)
        {
            if (await NewsService.IsPostThumbUpByUser(post, currentUser))
            {
                return "oi oi-arrow-circle-top cursor-pointer";
            }
            return "oi oi-arrow-top cursor-pointer";
        }
        */
    //TODO: display correctly if already rated
        return "oi oi-arrow-top cursor-pointer";
    }

    string GetDisplayedThumbDown(Post post)
    {
    /*
        if (currentUser != null)
        {
            if (await NewsService.IsPostThumbDownByUser(post, currentUser))
            {
                return "oi oi-arrow-circle-bottom cursor-pointer";
            }
            return "oi oi-arrow-bottom cursor-pointer";
        }
        */
        return "oi oi-arrow-bottom cursor-pointer";
    }

    string GetTheImage(Post post)
    {
        int userId = post.UserId;
        if (UserInformationList == null)
        {
            return "extra/user-empty-avatar.png";
        }
        string image = UserInformationList.FirstOrDefault(i => i.Id == userId).UserImageSrc;
        if (image != null)
        {
            return image;
        }
        return "extra/user-empty-avatar.png";
    }

}